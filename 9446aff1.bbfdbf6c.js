(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return c}));var o=n(3),a=n(7),r=(n(0),n(94)),l={id:"models",title:"Models"},i={unversionedId:"tutorial/models",id:"tutorial/models",isDocsHomePage:!1,title:"Models",description:"Let's start by adding another store in store.js to hold our Todo data, and add some test data to it",source:"@site/docs/tutorial/models.md",slug:"/tutorial/models",permalink:"/aft/tutorial/models",version:"current",sidebar:"main",previous:{title:"User",permalink:"/aft/tutorial/user"},next:{title:"Creating",permalink:"/aft/tutorial/creates"}},d=[{value:"Adding Models",id:"adding-models",children:[]},{value:"Reading data",id:"reading-data",children:[]}],s={toc:d};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Let's start by adding another store in ",Object(r.b)("inlineCode",{parentName:"p"},"store.js")," to hold our Todo data, and add some test data to it"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js",metastring:'title="store.js"',title:'"store.js"'}),'export const userstore = Vue.reactive({value: null})\n\n\nconst testData = [{\n    text: "Todo",\n    done: false,\n}, {\n    text: "Hello",\n    done: true,\n}]\n\nexport const todoStore = Vue.reactive({todos: testData})\n')),Object(r.b)("p",null,"And then a new component to display our todo data, ",Object(r.b)("inlineCode",{parentName:"p"},"todos.js"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js",metastring:'title="todos.js"',title:'"todos.js"'}),'\nexport const Todos = {\n    data() {\n        return {\n            todoStore: todoStore,\n        }\n    },\n    template: `\n    <div class="list-group" style="width: 20rem;">\n        <div v-for="todo in todoStore.todos">{{todo.text}} - {{todo.done}}</div>\n    </div>\n    `,\n}\n')),Object(r.b)("p",null,"And finally, let's connect it in to our app."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js",metastring:'title="app.js"',title:'"app.js"'}),"import {api} from './api.js'\nimport {Login} from './login.js'\nimport {Todos} from './todos.js'\nimport {userStore} from './store.js'\n\nconst App = {\n    components: {\n        'login-view': Login,\n        'todos': Todos,\n    },\n    template: `\n    <div v-if=\"!loaded\"></div>\n    <login-view v-else-if=\"userStore.value === null\" />\n    <todos v-else />\n    `,\n    created() {\n        api.me().then((user) => {\n            userStore.value = user;\n            this.loaded = true\n        }, () => {\n            this.loaded = true\n        });\n    },\n    data() {\n        return {\n            userStore: userStore,\n            loaded: false,\n        }\n    }\n}\n\nexport const app = Vue.createApp(App)\n")),Object(r.b)("h2",{id:"adding-models"},"Adding Models"),Object(r.b)("p",null,"Now let's create a basic Todo object on our backend. We'll have two attributes, ",Object(r.b)("inlineCode",{parentName:"p"},"text"),", a string which is the text of the Todo, and ",Object(r.b)("inlineCode",{parentName:"p"},"done")," a boolean indicating whether it's done or not. We'll also add a relationship to a ",Object(r.b)("inlineCode",{parentName:"p"},"user")," object\u2014the owner of the Todo."),Object(r.b)("p",null,"Switch back over to Aft, and navigate to the ",Object(r.b)("strong",{parentName:"p"},"Schema")," section."),Object(r.b)("p",null,"Click the ",Object(r.b)("strong",{parentName:"p"},"Add Model")," button at the top of the screen. "),Object(r.b)("p",null,"Fill in the text field that says ",Object(r.b)("em",{parentName:"p"},"Model name..")," with ",Object(r.b)("inlineCode",{parentName:"p"},"todo"),","),Object(r.b)("p",null,"Then click the ",Object(r.b)("strong",{parentName:"p"},"add")," button under Attributes and fill in our first attribute."),Object(r.b)("p",null,"For ",Object(r.b)("em",{parentName:"p"},"Attribute name..")," type ",Object(r.b)("inlineCode",{parentName:"p"},"text"),", and select ",Object(r.b)("inlineCode",{parentName:"p"},"String")," from the dropdown on the right, indicating its type."),Object(r.b)("p",null,"Click ",Object(r.b)("strong",{parentName:"p"},"add")," again, and this time name the attribute ",Object(r.b)("inlineCode",{parentName:"p"},"done"),", and select ",Object(r.b)("inlineCode",{parentName:"p"},"Bool")," from the type dropdown."),Object(r.b)("p",null,"Now let's add our relationship to ",Object(r.b)("inlineCode",{parentName:"p"},"user")," by clicking the ",Object(r.b)("strong",{parentName:"p"},"add")," button under Relationships."),Object(r.b)("p",null,"Set the ",Object(r.b)("em",{parentName:"p"},"Relationship name..")," to ",Object(r.b)("inlineCode",{parentName:"p"},"user")," and select ",Object(r.b)("inlineCode",{parentName:"p"},"User")," from the dropdown. That tells aft that this property points to a User object."),Object(r.b)("p",null,"You can leave the multiple box unchecked, since this relationship will only be to a single user, rather than a list of users."),Object(r.b)("p",null,"Once you've done that, click ",Object(r.b)("strong",{parentName:"p"},"Save")," next to the model name at the top of the page, and you're all done!"),Object(r.b)("h2",{id:"reading-data"},"Reading data"),Object(r.b)("p",null,"Aft automatically adds our new Todo model to the API, so lets try and read some data from it."),Object(r.b)("p",null,"First, navigate over to ",Object(r.b)("strong",{parentName:"p"},"Terminal")," in Aft and run the following function to add a Todo."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),'def main(aft):\n    return aft.api.create("todo", {"data": {\n            "text":"connect the backend", \n            "done": False, \n            "user": {"connect": {"email": "user@example.come"}}\n        }})\n')),Object(r.b)("p",null,"Now let's extend our client API slighly, by adding a loadTodos method."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js",metastring:'title="api.js"',title:'"api.js"'}),"export const api = {\n    ...\n    async loadTodos() {\n        return call('api', 'todo.findMany', {});\n    },\n    ...\n}\n")),Object(r.b)("p",null,"And finally, let's update our Todos component to call it!"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js",metastring:'title="todos.js"',title:'"todos.js"'}),'\nexport const Todos = {\n    data() {\n        return {\n            loaded: false,\n            todoStore: todoStore,\n        }\n    },\n    created() {\n        api.loadTodos().then((todos) => {\n            todoStore.todos = todos;\n            this.loaded = true;\n        }, (err) => {\n            this.error = err;\n            this.loaded = true;\n        });\n    },\n    template: `\n    <div v-if="loaded" class="list-group" style="width: 20rem;">\n        <div v-for="todo in todoStore.todos">{{todo.text}} - {{todo.done}}</div>\n    </div>\n    `,\n}\n\n')),Object(r.b)("p",null,"We can also clean up the test data from ",Object(r.b)("inlineCode",{parentName:"p"},"store.js"),", now that we've got real server-side data."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js",metastring:'title="store.js"',title:'"store.js"'}),"export const userstore = Vue.reactive({value: null})\nexport const todoStore = Vue.reactive({todos: []})\n")),Object(r.b)("p",null,"In the next section, we'll look at adding some data!"))}c.isMDXComponent=!0},94:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),c=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=c(n),u=o,m=p["".concat(l,".").concat(u)]||p[u]||b[u]||r;return n?a.a.createElement(m,i(i({ref:t},s),{},{components:n})):a.a.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);